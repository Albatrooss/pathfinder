[{"/Volumes/OKOPI/pathfinder/src/index.js":"1","/Volumes/OKOPI/pathfinder/src/App.js":"2","/Volumes/OKOPI/pathfinder/src/theme/globalStyle.js":"3","/Volumes/OKOPI/pathfinder/src/theme/index.js":"4","/Volumes/OKOPI/pathfinder/src/components/Grid.jsx":"5","/Volumes/OKOPI/pathfinder/src/components/Cell.jsx":"6"},{"size":403,"mtime":1612230840000,"results":"7","hashOfConfig":"8"},{"size":1573,"mtime":1612239944000,"results":"9","hashOfConfig":"8"},{"size":271,"mtime":1612230791000,"results":"10","hashOfConfig":"8"},{"size":312,"mtime":1612232603000,"results":"11","hashOfConfig":"8"},{"size":2522,"mtime":1612239952000,"results":"12","hashOfConfig":"8"},{"size":954,"mtime":1612237792000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"wrff2b",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Volumes/OKOPI/pathfinder/src/index.js",[],["30","31"],"/Volumes/OKOPI/pathfinder/src/App.js",["32","33"],"import React, { useState } from 'react'\nimport styled from 'styled-components';\n\nimport Grid from './components/Grid';\nimport { Wrapper } from './theme';\n\nconst Main = styled(Wrapper)`\n  display: flex;\n  flex-direction: column;\n\n`;\n\nlet initialCells = [];\nfor (let i = 0; i < 100; i++) {\n  if (i === 0) {\n    initialCells.push('start');\n  } else if (i === 99) {\n    initialCells.push('end');\n  } else {\n    initialCells.push(null);\n  }\n}\n\nexport default function App() {\n\n  const [click, setClick] = useState(false);\n  const [cells, setCells] = useState(initialCells)\n  const [gridSize, setGridSize] = useState(10);\n  const [startNode, setStartNode] = useState(0);\n  const [endNode, setEndNode] = useState(99);\n  let [blocked, setBlocked] = useState([]);\n\n  const assignStartNode = id => {\n    let num = Number(id.split('-')[1]);\n    setStartNode(num);\n  }\n\n  const assignEndNode = id => {\n    let num = Number(id.split('-')[1]);\n    setEndNode(num);\n  }\n\n  const assignClick = bool => {\n    setClick(bool);\n  }\n\n  const addToBlocked = id => {\n    if (blocked[blocked.length - 1] === id) return;\n    setBlocked(prev => [...prev, id])\n  }\n\n  return (\n    <Main onMouseUp={() => setClick(false)}>\n      <h1>HELLO WOLRD</h1>\n      <p>Start: {startNode} </p>\n      <p>End: {endNode} </p>\n      <Grid \n        cells={cells} \n        gridSize={gridSize} \n        setStartNode={assignStartNode} \n        setEndNode={assignEndNode} \n        clicking={click}\n        setClicking={assignClick}\n        blocked={blocked}\n        addToBlocked={addToBlocked}\n      />\n    </Main>\n  )\n}\n","/Volumes/OKOPI/pathfinder/src/theme/globalStyle.js",[],"/Volumes/OKOPI/pathfinder/src/theme/index.js",["34"],"import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    width: 100%;\n    max-width: 1366px;\n    margin: 0 auto;\n`;\n\nexport default {\n    color: {\n        primary: '#66645F',\n        secondary: '#FFB901',\n        light: '#E6E1D5',\n        dark: '#78715F',\n        mid: '#C4C0B7',\n    },\n\n}","/Volumes/OKOPI/pathfinder/src/components/Grid.jsx",["35"],"import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport Cell from './Cell';\n\nconst GridWrapper = styled.div`\n    display: grid;\n    ${({theme, gridSize}) => css`\n        background-color: ${theme.color.primary};\n        grid-template-columns: repeat(${gridSize}, 1fr);\n        grid-template-rows: repeat(${gridSize}, 1fr);\n    `}\n    grid-gap: 2px;\n    padding: 2px;\n    width: 80vmin;\n    height: 80vmin;\n    margin: 0 auto;\n`;\n\nconst Start = styled.div`\n    background-color: green;\n    width: 70%;\n    height: 70%;\n`;\n\nconst End = styled.div`\n    background-color: red;\n    width: 70%;\n    height: 70%;\n`;\n\nconst Block = styled.div`\n    background-color: grey;\n    width: 90%;\n    height: 90%;\n`;\n\nexport default function Grid({ cells, gridSize, setStartNode, setEndNode, clicking, setClicking, blocked, addToBlocked }) {\n\n\n    const dragStart = e => {\n        const target = e.target;\n        e.dataTransfer.setData('card_id', target.id);\n        \n        setTimeout(() => {\n            target.style.display = 'none';\n        }, 0);\n    }\n\n    const dragOver = e => e.stopPropagation();\n\n    let last = 0;\n    const mouseMove = e => {\n        let split = e.target.id.split('-')\n        let isCell = split[0] === 'cell';\n        if (clicking && isCell) {\n            let id = split[1]\n            if (last !== id) {\n                addToBlocked(Number(id));\n                last = id;\n            }\n        }\n    }\n\n    return (\n        <GridWrapper id='grid' gridSize={gridSize} onMouseMove={mouseMove} onMouseDown={() => setClicking(true)}>\n            {cells.map((cell, i) => {\n                let data;\n                if (blocked.includes(i)) cell = 'block'\n                switch(cell) {\n                    case 'start':\n                        data = <Start id=\"startNode\" draggable={true} onDragStart={dragStart} onDragOver={dragOver} />\n                        break;\n                    case 'end':\n                        data = <End id=\"endNode\" draggable={true} onDragStart={dragStart} onDragOver={dragOver} />\n                        break;\n                    case 'block':\n                        data = <Block id=\"endNode\"/>\n                        break;\n                    default:\n                        data = null;\n                }\n                return (<Cell key={i} id={`cell-${i}`} setStartNode={setStartNode} setEndNode={setEndNode}>\n                    {data}\n                </Cell>)\n            }\n            )}\n        </GridWrapper>\n    )\n}\n","/Volumes/OKOPI/pathfinder/src/components/Cell.jsx",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":27,"column":17,"nodeType":"42","messageId":"43","endLine":27,"endColumn":25},{"ruleId":"40","severity":1,"message":"44","line":28,"column":20,"nodeType":"42","messageId":"43","endLine":28,"endColumn":31},{"ruleId":"45","severity":1,"message":"46","line":9,"column":1,"nodeType":"47","endLine":18,"endColumn":2},{"ruleId":"40","severity":1,"message":"48","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":25},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'setCells' is assigned a value but never used.","Identifier","unusedVar","'setGridSize' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]